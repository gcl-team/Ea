@article{Borning1981,
   author = {Borning, Alan},
   title = {The Programming Language Aspects of ThingLab, a Constraint-Oriented Simulation Laboratory},
   journal = {ACM Trans. Program. Lang. Syst.},
   volume = {3},
   number = {4},
   pages = {353-387},
   ISSN = {0164-0925},
   DOI = {10.1145/357146.357147},
   year = {1981},
   type = {Journal Article}
}

@article{Dahl1966,
   author = {Dahl, Ole-Johan and Nygaard, Kristen},
   title = {SIMULA: an ALGOL-based simulation language},
   journal = {Commun. ACM},
   volume = {9},
   number = {9},
   pages = {671-678},
   ISSN = {0001-0782},
   DOI = {10.1145/365813.365819},
   year = {1966},
   type = {Journal Article}
}

@book{Kelton1998,
   author = {Kelton, W David and Sadowski, Randall P and Sadowski, Deborah A},
   title = {Simulation with ARENA},
   publisher = {WCB/McGraw-Hill New York},
   volume = {47},
   year = {1998},
   type = {Book}
}

@inproceedings{Lagorio2014,
   author = {Lagorio, Giovanni and Parma, Alessio},
   title = {Dessert, an Open-Source .NET Framework for Process-Based Discrete-Event Simulation},
   booktitle = {COMPUTATION TOOLS 2014, The Fifth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking},
   pages = {1 - 6},
   abstract = {We present Dessert, an open-source framework for process-based discrete-event simulation, designed to retain the simplicity and flexibility of SimPy, within the strongly-typed .NET environment. Both frameworks build domain-specific languages, for simulation writing, by using existing constructs in a novel way and providing a rich library of classes. By exploiting .NET generic types and iterators, we have successfully retained, and in few places even enhanced, the lean syntax and usability of the original library, without sacrificing static type checking. Static type-safety, in addition to being a very important property by itself, facilitates runtime code optimizations; indeed, benchmarks show that our Dessert outperforms SimPy.},
   keywords = {Discrete-event simulation; .NET; Python},
   ISBN = {978-1-61208-344-5},
   url = {http://www.thinkmind.org/index.php?view=article&articleid=computation_tools_2014_1_10_80003},
   type = {Conference Proceedings}
}

@inproceedings{Muller2011,
   author = {Muller, D.},
   title = {Automod - providing simulation solutions for over 25 years},
   booktitle = {Simulation Conference (WSC), Proceedings of the 2011 Winter},
   pages = {39-51},
   abstract = {Decision making in industry continues to become more complicated. Customers are more demanding, competition is more fierce, and costs for labor and raw materials continue to rise. Managers need state-of-the-art tools to help in planning, design, and operations of their facilities. Simulation provides a virtual factory where ideas can be tested and performance improved. The AutoMod product suite from Applied Materials has been used on thousands of projects to help engineers and managers make the best decisions possible. AutoMod supports hierarchical model construction. This architecture allows users to reuse model components in other models, decreasing the time required to build a model. In addition, recent enhancements to AutoMod's material handling template systems have in-creased modeling accuracy and ease-of-use. These latest advances have helped make AutoMod one of the most widely used simulation software packages.},
   keywords = {decision making
digital simulation
object-oriented programming
software packages
solid modelling
virtual manufacturing
AutoMod product suite
Automod
decision making
hierarchical model construction
labor cost
material handling template systems
model components reuse
modeling accuracy
raw materials
simulation software packages
simulation solutions
state-of-the-art tools
virtual factory
Animation
Load modeling
Materials
Process control
Solid modeling
Statistical distributions},
   url = {http://ieeexplore.ieee.org.libproxy1.nus.edu.sg/stamp/stamp.jsp?tp=&arnumber=6147738},
   year = {2011},
   type = {Conference Proceedings}
}

@inproceedings{Nordgren2002,
   author = {Nordgren, W.B.},
   title = {Flexsim simulation environment},
   booktitle = {Simulation Conference, 2002. Proceedings of the Winter},
   volume = {1},
   pages = {250-252 vol.1},
   abstract = {Flexsim is an object-oriented software environment used to develop, model, simulate, visualize, and monitor dynamic-flow process activities and systems. Flexsim is a complete suite of development tools to develop and compile simulation applications. There are 3 levels of use within the Flexsim environment: (1) the Flexsim Compiler, (2) the Flexsim Developer, and (3) Flexsim Application products. The Flexsim environment is completely integrated with the C++ compiler and uses flexscript (a C++ library that is precompiled) or C++ directly. All animation is OpenGL and boasts incredible virtual reality animation. Animation can be shown in tree view, 2D, 3D, and virtual reality. All views can be shown concurrently during the model development or run phase. Flexsim has been used to model manufacturing, warehousing, material handling processes, semiconductor manufacturing, marine container terminal processes, and shared access storage network (SANS) simulation. This paper briefly describes the uses and benefits of the Flexsim Simulation Environment.},
   keywords = {computer animation
digital simulation
object-oriented programming
program compilers
software tools
virtual reality
C++ compiler
Flexsim Application
Flexsim Compiler
Flexsim Developer
Flexsim simulation environment
OpenGL
development tools
dynamic flow process
flexscript
manufacturing
marine container terminal processes
material handling processes
object-oriented software environment
semiconductor manufacturing
shared access storage network simulation
tree view
virtual reality animation
warehousing
Animation
Application software
Manufacturing processes
Material storage
Monitoring
Object oriented modeling
Semiconductor device manufacture
Virtual manufacturing
Virtual reality
Visualization},
   url = {http://ieeexplore.ieee.org.libproxy1.nus.edu.sg/stamp/stamp.jsp?tp=&arnumber=1172892},
   year = {2002},
   type = {Conference Proceedings}
}

@article{Rossetti2008,
   author = {Rossetti, M. D.},
   title = {Java simulation library (JSL): an open-source object-oriented library for discrete-event simulation in Java},
   journal = {International Journal of Simulation & Process Modelling},
   volume = {4},
   number = {1},
   pages = {69-87},
   note = {10578483
Java simulation library
open-source object-oriented library
discrete-event simulation
Java programming language
software package
simulation modelling language},
   abstract = {This paper describes the design and functionality of an open-source object-oriented library for executing discrete-event simulation models in the Java programming language. The structure of the library is described in terms of its packages, class structure, and functionalities. The purpose of this paper is to provide an understanding of the library so that practitioners and researchers can better use the library for simulation modelling. In addition, the expository nature of this paper can help new users or students learn the basics of discrete-event simulation from the library's design. The capabilities of the library are illustrated through a number of source-code examples..},
   keywords = {discrete event simulation
Java
object-oriented programming
public domain software
simulation languages
software libraries
software packages},
   ISSN = {1740-2123},
   DOI = {10.1504/IJSPM.2008.020614},
   url = {http://dx.doi.org/10.1504/IJSPM.2008.020614},
   year = {2008},
   type = {Journal Article}
}

@unpublished{Rus2003,
   author = {Rus, Ioana and Neu, Holger and Munch, Jurgen},
   title = {A Systematic Methodology for Developing Discrete Event Simulation Models of Software Development Processes},
   keywords = {spsm},
   DOI = {citeulike-article-id:6937799},
   year = {2003},
   type = {Unpublished Work}
}

@article{Schruben1993,
   author = {Schruben, L. and Yucesan, E.},
   title = {Modeling paradigms for discrete event simulation},
   journal = {Operations Research Letters},
   volume = {13},
   number = {5},
   pages = {265-75},
   note = {4525298
modeling paradigms
discrete event simulation
graph theory
simulation graphs
model-based problem-solving environment},
   abstract = {This paper reviews modeling paradigms for discrete event simulation. Various formalisms are described and critically discussed in terms of both their ability to contribute to an improved theory of simulation and their capability for assisting in effective model construction and implementation. The mathematics of graph theory are suggested as a rigorous and comprehensive basis for specifying discrete event simulation models. In particular, simulation graphs are described and shown to possess many of the desirable features of a modern model-based problem-solving environment.},
   keywords = {discrete event simulation
graph theory},
   ISSN = {0167-6377},
   DOI = {10.1016/0167-6377(93)90049-M},
   url = {http://dx.doi.org/10.1016/0167-6377(93)90049-M},
   year = {1993},
   type = {Journal Article}
}

@inproceedings{Varga2001,
   author = {Varga, A.},
   title = {The OMNET++ discrete event simulation system},
   booktitle = {Modelling and Simulation 2001. 15th European Simulation Multiconference 2001. ESM'2001, 6-9 June 2001},
   series = {Modelling and Simulation 2001. 15th European Simulation Multiconference 2001. ESM'2001},
   publisher = {SCS},
   pages = {319-25},
   note = {7107146
OMNET++ discrete event simulation system
performance analysis
C++-based discrete event simulation package
computer networks
distributed systems
very large networks
reusable model components
traceability
debuggability
simulation models
open source free software
OMNET++ simulation engine
message flow
network graphics
simulation model
graphical user interface},
   abstract = {The paper introduces OMNeT++, a C++-based discrete event simulation package primarily targeted at simulating computer networks and other distributed systems. OMNeT++ is fully programmable and modular, and it was designed from the ground up to support modeling of very large networks built from reusable model components. Large emphasis was placed also on easy traceability and debuggability of simulation models: one can execute the simulation under a powerful graphical user interface, which makes the internals of a simulation model fully visible to the person running the simulation: it displays the network graphics, animates the message flow and lets the user peek into objects and variables within the model. These features make OMNeT++ a good candidate for both research and educational purposes. The OMNET++ simulation engine can be easily embedded into larger applications. OMNeT++ is open-source, free for non-profit use, and it has a fairly large user community.},
   keywords = {C++ language
discrete event simulation
graphical user interfaces
public domain software
virtual machines},
   type = {Conference Proceedings}
}

@article{Xia2012,
   author = {Xia, Wei and Yao, Yiping and Mu, Xiaodong},
   title = {An extended event graph-based modelling method for parallel and distributed discrete-event simulation},
   journal = {Mathematical and Computer Modelling of Dynamical Systems},
   volume = {18},
   number = {3},
   pages = {287-306},
   abstract = {The developing logical process (LP)-based parallel and distributed discrete-event simulation (PDES) in the existing PDES programming environments is a difficult and time-consuming process. Event graph is a simple and powerful modelling formalism of discrete-event simulation, whereas this formalism does not support PDES. This article proposes an extension of the event graph to consider the communication of LPs via the events sent, which is called ?extended event graph (EEG)?, and proposes an EEG-based modelling method for PDES. This modelling method shifts the focus of PDES development from writing code to building models, and the system implementation can be automatically and directly generated from EEG model. The experimental results show that EEG models can successfully execute in the parallel simulator, and this framework can effectively improve the PDES modelling activities.},
   ISSN = {1387-3954},
   DOI = {10.1080/13873954.2012.655697},
   url = {http://dx.doi.org/10.1080/13873954.2012.655697},
   year = {2012},
   type = {Journal Article}
}

